a <- available.packages()
View(a)
head(rownames(a), 3)
install.packages("KernSmooth")
load.packages("KernSmooth")
load("KernSmooth")
load.packages(KernSmooth)
library(KernSmooth)
library(swirl)
swirl()
ls()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest2.R")
file.rename("mytest.R" to "mytest2.R")
?file.rename()
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd()
setwd("old.dir")
old.dir
setwd(old.dir)
unlink("testdir")
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by = 0.5)
my_seq <- seq(5, 10, lengh = 30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
play()
my_seq
my_seq
nxt()
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(1, 2, 3), times = 10)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- C("My", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Dmitry")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = "")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
quit()
library(swirl)
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
play()
y
nxt()
my_data <- sample(c(y,z), 100)
in.na(my_data)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
quit()
!isTRUE(8 != 5)
isTRUE(3)
isTRUE(1)
isTRUE(NA)
isTRUE(!TRUE)
!isTRUE(4 < 3)
xor(FALSE, FALSE)
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function("My first function")
boring_function("My first function!")
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
play()
x <- c(4,5,6,8,3,67,6)
x[-1]
evaluate(function(x){tail(x, 1)}, c(4,6,2,6,7,3,6,7))
nxt()
evealuate(function(x){tail(x,1)}, c(8, 4, 0))
evaluate(function(x){tail(x,1)}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("What's up")
submit()
mad_libs("New York", "angry", "tree")
submit()
"I" %p% "love" %p% "R!"
quit()
library(swirl)
swirl()
d1 <-Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
quit()
x <- 1:10
if (x > 5) {}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
libraty(datasets)
library(datasets)
?iris
data(iris)
iris
sub(iris$species = "virginica")
iris$Species
lapply(iris, mean, iris$Species = "virginica")
library(datasets)
data("iris")
iris
x <- subset(iris, iris$Species == "virginica)
x
x
quit()
library(datasets)
data("iris")
class(iris)
iris[iris$Sepal.Length, iris$Species]
iris
x <- iris[iris$Sepal.Length, iris$Species == "virginica"]
irirs[, c("Sepal.Length", "Species" = "virginica")]
iris[, c("Sepal.Length", "Species" = "virginica")]
iris[, c("Sepal.Length", "Species")]
iris[, "Sepal.Length"]
iris[, "Sepal.Length", drop = FALSE]
iris
iris["Sepal.Length" == 5.1, "Sepal.Width"]
iris[iris$Species == 'virginica', iris$Sepal.Length]
iris[, c(iris$Sepal.Length, iris$Sepal.Width)]
iris[iris$Sepal.Length, ]
iris[, iris$Sepal.Length, iris$Species]
iris[, c("Sepal.Length", "Species")]
iris
?subset
subset(iris, Species == virginica)
subset(iris, Species == "virginica")
subset(iris, Species == "virginica", select = Sepal.Length)
mean(subset(iris, Species == "virginica", select = Sepal.Lenght))
x.sub <- subset(iris, Species == "virginica", select = Sepal.Length)
mean(x.sub)
mean(x.sub[x.sub$Sepal.Length])
x.sub
mean(x.sub["Sepal.Length"])
mean(subset(iris, Species == "virginica")$Sepal.Length)
iris
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcars)
mtcars
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
abs(15.1000 - 19.74286)
mean(subset(mtcars, cyl == 8)$mpg)
x <- mean(subset(mtcars, cyl == 8)$mpg)
y <- mean(subset(mtcars, cyl == 4)$mpg)
abs(x - y)
debug(ls)
ls
s
str(mtcars)
stop()
Q
Q
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- (c(0, 1), 100, prob = c(0.3, 0.7))
flips <- (c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- (0:1, 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sample(1, 100, prob = 0.7)
flips2 <- sample(1, 100, replace = TRUE. prob = 0.7)
flips2 <- sample(1, 100, replace = TRUE, prob = 0.7)
flips2 <- rbinom(100, 1, prob = 0.7)
flips2
sum()
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicane(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- calMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
quit()
setwd("E:/My folder/Work/Data science/Learning/Coursera/Data Science Spec/Coursera files/ProgrammingAssignment2")
source("cashematrix.R")
source("cachematrix.R")
